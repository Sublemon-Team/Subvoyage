
buildscript {
    repositories {
        mavenLocal();
        mavenCentral();
        maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven{ url 'https://www.jitpack.io' }
    }
    dependencies {

    }
}

apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]


/** MINDUSTRY RUN CLIENT
   * by Skoow (and thanks to IriDark for some code)
   * change or add "mindustry_run_version" to gradle.properties to start
     example: mindustry_run_version = v146
*/ 
import java.nio.channels.Channels
import java.nio.channels.FileChannel
import java.nio.channels.ReadableByteChannel

task createModZip (type: Zip) {
    dependsOn jar
    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar")] }
    into("mod_contents")
}

task copyJar(type: Copy) {
    dependsOn createModZip
    from("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
    into("${System.getProperty('user.home')}/AppData/Roaming/MindustryTesting/${project.archivesBaseName}/Mindustry/mods/")
}

task runClient(type: JavaExec) {
    dependsOn copyJar
    group = 'runs'
    description = 'Mindustry RunClient'
    String githubClientUrl = "https://github.com/Anuken/Mindustry/releases/download/${mindustry_run_version}/Mindustry.jar"
    String dataFolder = System.getenv("APPDATA") + "\\MindustryTesting";
    File dataFolderFile = new File(dataFolder);
    dataFolderFile.mkdir();
    File clientFile = new File(dataFolderFile, "client-${mindustry_run_version}.jar");
    println "\u001B[33mChecking for Mindustry \u001B[35m${mindustry_run_version} \u001B[33mclient..\u001B[0m";
    if (!clientFile.exists()) {
        println "\u001B[33mClient not found. Download started..\u001B[0m";
        URL url = new URL(githubClientUrl);
        ReadableByteChannel readableByteChannel = Channels.newChannel(url.openStream());
        FileOutputStream fileOutputStream = new FileOutputStream(clientFile);
        FileChannel fileChannel = fileOutputStream.getChannel();
        clientFile.createNewFile();
        fileChannel.transferFrom(readableByteChannel, 0, Long.MAX_VALUE);

        readableByteChannel.close();
        fileOutputStream.close();
        fileChannel.close();

        println "\u001B[32mClient has been downloaded successfully.\u001B[0m";
    }
    println "\u001B[32mStarting Mindustry client..\u001B[0m"

    environment "APPDATA", "${dataFolder}\\${project.archivesBaseName}";

    classpath = files(clientFile.getAbsolutePath())
    main = 'mindustry.desktop.DesktopLauncher'
    args("-debug")
    doLast {
        println "\u001B[32mDeleting temporary mod file..\u001B[0m"
        String modsFolder = System.getenv("APPDATA") + "\\MindustryTesting\\${project.archivesBaseName}\\Mindustry\\mods";
        File modFile = new File(modsFolder,"${project.archivesBaseName}Desktop.jar");
        modFile.delete();
    }
}

task createModZipLinux (type: Zip) {
    dependsOn jar
    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar")] }
    into("mod_contents")
}

task copyJarLinux(type: Copy) {
    dependsOn createModZipLinux
    from("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
    into("${System.getProperty('user.home')}/.local/share/Mindustry/mods/")
}

task runClientLinux(type: JavaExec) {
    dependsOn copyJarLinux
    group = 'runs'
    description = 'Mindustry RunClient'
    String githubClientUrl = "https://github.com/Anuken/Mindustry/releases/download/${mindustry_run_version}/Mindustry.jar"
    String dataFolder = "${System.getProperty('user.home')}/.local/share/Mindustry";
    File dataFolderFile = new File(dataFolder);
    dataFolderFile.mkdir();
    File clientFile = new File(dataFolderFile, "client-${mindustry_run_version}.jar");
    println "\u001B[33mChecking for Mindustry \u001B[35m${mindustry_run_version} \u001B[33mclient..\u001B[0m";
    if (!clientFile.exists()) {
        println "\u001B[33mClient not found. Download started..\u001B[0m";
        URL url = new URL(githubClientUrl);
        ReadableByteChannel readableByteChannel = Channels.newChannel(url.openStream());
        FileOutputStream fileOutputStream = new FileOutputStream(clientFile);
        FileChannel fileChannel = fileOutputStream.getChannel();
        clientFile.createNewFile();
        fileChannel.transferFrom(readableByteChannel, 0, Long.MAX_VALUE);

        readableByteChannel.close();
        fileOutputStream.close();
        fileChannel.close();

        println "\u001B[32mClient has been downloaded successfully.\u001B[0m";
    }
    println "\u001B[32mStarting Mindustry client..\u001B[0m"

    environment "APPDATA", "${dataFolder}\\${project.archivesBaseName}";

    classpath = files(clientFile.getAbsolutePath())
    main = 'mindustry.desktop.DesktopLauncher'
    args("-debug")
    doLast {
        println "\u001B[32mDeleting temporary mod file..\u001B[0m"
        String modsFolder = System.getenv("APPDATA") + "\\MindustryTesting\\${project.archivesBaseName}\\Mindustry\\mods";
        File modFile = new File(modsFolder,"${project.archivesBaseName}Desktop.jar");
        modFile.delete();
    }
}



repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    from files(layout.projectDirectory.dir('assets'))
    from(projectDir){
        include "mod.hjson"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}
